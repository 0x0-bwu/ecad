
import os
import sys
from sys import platform

cwd = os.getcwd()
debug_mode = True
build_unit_test = True

# Compile flags
cxx_flags = [
    "-g",
    "-Wall",
    "-w",
    "-Wl,-rpath,\$$ORIGIN",
    "-std=c++17",
    "-fopenmp",
    "-lpthread",
]

if debug_mode :
    cxx_flags.append(["-g", "-O0"])
else :
    cxx_flags.append(["-s", "-O0", "-DNDEBUG"])

# Thirdpart
## boost
boost_include_path = '/usr/local/include'
boost_library_path = '/usr/local/lib'
# boost_library_path = '/usr/lib/x86_64-linux-gnu'
boost_python_support = True
# boost_python_version = 3.8
boost_python_version = 3.6

boost_serialization_support = True

## mfsolver
mfsolver_support = False
mfsolver_path = os.path.abspath(cwd + '/thirdpart/internal/mfsolver')

## thirdpart
thirdpart_lib_path = cwd + '/thirdpart/libs'

## os
linux_library_path = '/usr/lib/x86_64-linux-gnu'

# Include dirs
cpp_path = [
    '/usr/include',
    cwd + '/src',
    cwd + '/thirdpart',
    cwd + '/thirdpart/eigen3',
]

##boost
cpp_path.append(boost_include_path)
##python
python_include_path = '/usr/include/python' + str(boost_python_version)
cpp_path.append(python_include_path)

if mfsolver_support :
    cpp_path.append(mfsolver_path + "/mf2/include")
    cpp_path.append(mfsolver_path + "/mf2/include/core")

# Build dir
build_path = os.path.abspath(cwd + '/build')

#Environment
main_env = Environment()
main_env.Append(CPPPATH=cpp_path)
main_env.Append(CXXFLAGS=cxx_flags)
main_env.Append(BUILDPATH=build_path)
main_env.Append(MFSOLVERSUPPORT=mfsolver_support)
main_env.Append(BOOSTINCLUDEPATH=boost_include_path)
main_env.Append(BOOSTLIBRARYPATH=boost_library_path)
main_env.Append(BOOSTPYTHONSUPPORT=boost_python_support)
main_env.Append(BOOSTPYTHONVERSION=boost_python_version)
main_env.Append(BOOSTSERIALIZATIONSUPPORT=boost_serialization_support)
main_env.Append(THIRDPARTLIBPATH=thirdpart_lib_path)
main_env.Append(LINUXLIBRARYPATH=linux_library_path)

if mfsolver_support :
    main_env.Append(MFSOLVERPATH=mfsolver_path)

# SCONS scripts to build
build_scripts = [
    'src/SConscript' 
]

if build_unit_test :
    build_scripts.append('test/SConscript')

if boost_python_support :
    build_scripts.append('py/SConscript')

for script in build_scripts:
    env = main_env.Clone()
    SConscript(script, exports='env')