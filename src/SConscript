Import('env')
import os
import sys
import fnmatch
from sys import platform

cwd = os.getcwd()

build_dir = env['BUILDPATH']
lib_name= build_dir + '/Ecad'
mfsolver_support = env['MFSOLVERSUPPORT']
boost_library_path = env['BOOSTLIBRARYPATH']
thirdpart_lib_path = env['THIRDPARTLIBPATH']
linux_library_path = env['LINUXLIBRARYPATH']

#Source to generate lib
def get_source_files(dir, pattern) :
    source_files = []
    for root, dirs, files in os.walk(dir) :
        for file in files :
            if fnmatch.fnmatch(file, pattern) :
                source_files.append(os.path.join(root, file))
    return source_files
    
source_files = get_source_files(cwd, '*.cpp')

libs_name = [
    'pthread',
    'png',
    'omp'
]

libs_path = [build_dir, boost_library_path, thirdpart_lib_path, linux_library_path]

# boost_python
boost_python_support = env['BOOSTPYTHONSUPPORT']
if boost_python_support :
    boost_python_version = env['BOOSTPYTHONVERSION']
    boost_python_lib = 'boost_python' + str(int(boost_python_version * 10))
    python_lib = 'python' + str(boost_python_version)
    libs_name.append(boost_python_lib)
    libs_name.append(python_lib)

# boost_serialization
boost_serialization_support = env['BOOSTSERIALIZATIONSUPPORT']
if boost_serialization_support :
    libs_name.append('boost_serialization')

# mfsolver
mfsolver_support = env['MFSOLVERSUPPORT']
if mfsolver_support :
    mfsolver_path = env['MFSOLVERPATH']
    libs_path.append(mfsolver_path + '/mf2/lib')
    libs_path.append(mfsolver_path + '/mkl/lib')

    libs_name += [
        'mkl_intel_lp64',
        'mkl_sequential',
        'mkl_core',
        'ifcoremt',
        'imf',
        'iomp5',
        'irc',
        'intlc',
        'svml',
        'cublas',
        'cublasLt',
        'cudart',
        'ansmf',
        'ngcore'    
    ]   

#RPATH
rpath = libs_path

#Build lib
env.SharedLibrary(lib_name, source_files, LIBS=libs_name,LIBPATH=libs_path, RPATH=rpath)